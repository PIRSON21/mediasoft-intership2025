// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handler

import (
	"context"

	"github.com/PIRSON21/mediasoft-intership2025/internal/dto"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAnalyticsService creates a new instance of MockAnalyticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyticsService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockAnalyticsService {
	mock := &MockAnalyticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnalyticsService is an autogenerated mock type for the AnalyticsService type
type MockAnalyticsService struct {
	mock.Mock
}

type MockAnalyticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyticsService) EXPECT() *MockAnalyticsService_Expecter {
	return &MockAnalyticsService_Expecter{mock: &_m.Mock}
}

// GetTopWarehouses provides a mock function for the type MockAnalyticsService
func (_mock *MockAnalyticsService) GetTopWarehouses(ctx context.Context, limit int) ([]*dto.WarehouseAnalyticsAtListResponse, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTopWarehouses")
	}

	var r0 []*dto.WarehouseAnalyticsAtListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]*dto.WarehouseAnalyticsAtListResponse, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []*dto.WarehouseAnalyticsAtListResponse); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.WarehouseAnalyticsAtListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnalyticsService_GetTopWarehouses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopWarehouses'
type MockAnalyticsService_GetTopWarehouses_Call struct {
	*mock.Call
}

// GetTopWarehouses is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *MockAnalyticsService_Expecter) GetTopWarehouses(ctx interface{}, limit interface{}) *MockAnalyticsService_GetTopWarehouses_Call {
	return &MockAnalyticsService_GetTopWarehouses_Call{Call: _e.mock.On("GetTopWarehouses", ctx, limit)}
}

func (_c *MockAnalyticsService_GetTopWarehouses_Call) Run(run func(ctx context.Context, limit int)) *MockAnalyticsService_GetTopWarehouses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAnalyticsService_GetTopWarehouses_Call) Return(warehouseAnalyticsAtListResponses []*dto.WarehouseAnalyticsAtListResponse, err error) *MockAnalyticsService_GetTopWarehouses_Call {
	_c.Call.Return(warehouseAnalyticsAtListResponses, err)
	return _c
}

func (_c *MockAnalyticsService_GetTopWarehouses_Call) RunAndReturn(run func(ctx context.Context, limit int) ([]*dto.WarehouseAnalyticsAtListResponse, error)) *MockAnalyticsService_GetTopWarehouses_Call {
	_c.Call.Return(run)
	return _c
}

// GetWarehouseAnalytics provides a mock function for the type MockAnalyticsService
func (_mock *MockAnalyticsService) GetWarehouseAnalytics(ctx context.Context, warehouseID string) (*dto.WarehouseAnalyticsResponse, error) {
	ret := _mock.Called(ctx, warehouseID)

	if len(ret) == 0 {
		panic("no return value specified for GetWarehouseAnalytics")
	}

	var r0 *dto.WarehouseAnalyticsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dto.WarehouseAnalyticsResponse, error)); ok {
		return returnFunc(ctx, warehouseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dto.WarehouseAnalyticsResponse); ok {
		r0 = returnFunc(ctx, warehouseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WarehouseAnalyticsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, warehouseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnalyticsService_GetWarehouseAnalytics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWarehouseAnalytics'
type MockAnalyticsService_GetWarehouseAnalytics_Call struct {
	*mock.Call
}

// GetWarehouseAnalytics is a helper method to define mock.On call
//   - ctx context.Context
//   - warehouseID string
func (_e *MockAnalyticsService_Expecter) GetWarehouseAnalytics(ctx interface{}, warehouseID interface{}) *MockAnalyticsService_GetWarehouseAnalytics_Call {
	return &MockAnalyticsService_GetWarehouseAnalytics_Call{Call: _e.mock.On("GetWarehouseAnalytics", ctx, warehouseID)}
}

func (_c *MockAnalyticsService_GetWarehouseAnalytics_Call) Run(run func(ctx context.Context, warehouseID string)) *MockAnalyticsService_GetWarehouseAnalytics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAnalyticsService_GetWarehouseAnalytics_Call) Return(warehouseAnalyticsResponse *dto.WarehouseAnalyticsResponse, err error) *MockAnalyticsService_GetWarehouseAnalytics_Call {
	_c.Call.Return(warehouseAnalyticsResponse, err)
	return _c
}

func (_c *MockAnalyticsService_GetWarehouseAnalytics_Call) RunAndReturn(run func(ctx context.Context, warehouseID string) (*dto.WarehouseAnalyticsResponse, error)) *MockAnalyticsService_GetWarehouseAnalytics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInventoryService creates a new instance of MockInventoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInventoryService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockInventoryService {
	mock := &MockInventoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInventoryService is an autogenerated mock type for the InventoryService type
type MockInventoryService struct {
	mock.Mock
}

type MockInventoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInventoryService) EXPECT() *MockInventoryService_Expecter {
	return &MockInventoryService_Expecter{mock: &_m.Mock}
}

// AddDiscountToProduct provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) AddDiscountToProduct(ctx context.Context, request *dto.DiscountToProductRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for AddDiscountToProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.DiscountToProductRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInventoryService_AddDiscountToProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDiscountToProduct'
type MockInventoryService_AddDiscountToProduct_Call struct {
	*mock.Call
}

// AddDiscountToProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.DiscountToProductRequest
func (_e *MockInventoryService_Expecter) AddDiscountToProduct(ctx interface{}, request interface{}) *MockInventoryService_AddDiscountToProduct_Call {
	return &MockInventoryService_AddDiscountToProduct_Call{Call: _e.mock.On("AddDiscountToProduct", ctx, request)}
}

func (_c *MockInventoryService_AddDiscountToProduct_Call) Run(run func(ctx context.Context, request *dto.DiscountToProductRequest)) *MockInventoryService_AddDiscountToProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.DiscountToProductRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.DiscountToProductRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_AddDiscountToProduct_Call) Return(err error) *MockInventoryService_AddDiscountToProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInventoryService_AddDiscountToProduct_Call) RunAndReturn(run func(ctx context.Context, request *dto.DiscountToProductRequest) error) *MockInventoryService_AddDiscountToProduct_Call {
	_c.Call.Return(run)
	return _c
}

// BuyProducts provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) BuyProducts(ctx context.Context, request *dto.CartRequest) (*dto.CartResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for BuyProducts")
	}

	var r0 *dto.CartResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CartRequest) (*dto.CartResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CartRequest) *dto.CartResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CartResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.CartRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_BuyProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyProducts'
type MockInventoryService_BuyProducts_Call struct {
	*mock.Call
}

// BuyProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.CartRequest
func (_e *MockInventoryService_Expecter) BuyProducts(ctx interface{}, request interface{}) *MockInventoryService_BuyProducts_Call {
	return &MockInventoryService_BuyProducts_Call{Call: _e.mock.On("BuyProducts", ctx, request)}
}

func (_c *MockInventoryService_BuyProducts_Call) Run(run func(ctx context.Context, request *dto.CartRequest)) *MockInventoryService_BuyProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CartRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CartRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_BuyProducts_Call) Return(cartResponse *dto.CartResponse, err error) *MockInventoryService_BuyProducts_Call {
	_c.Call.Return(cartResponse, err)
	return _c
}

func (_c *MockInventoryService_BuyProducts_Call) RunAndReturn(run func(ctx context.Context, request *dto.CartRequest) (*dto.CartResponse, error)) *MockInventoryService_BuyProducts_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateCart provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) CalculateCart(ctx context.Context, request *dto.CartRequest) (*dto.CartResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CalculateCart")
	}

	var r0 *dto.CartResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CartRequest) (*dto.CartResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CartRequest) *dto.CartResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CartResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.CartRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_CalculateCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateCart'
type MockInventoryService_CalculateCart_Call struct {
	*mock.Call
}

// CalculateCart is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.CartRequest
func (_e *MockInventoryService_Expecter) CalculateCart(ctx interface{}, request interface{}) *MockInventoryService_CalculateCart_Call {
	return &MockInventoryService_CalculateCart_Call{Call: _e.mock.On("CalculateCart", ctx, request)}
}

func (_c *MockInventoryService_CalculateCart_Call) Run(run func(ctx context.Context, request *dto.CartRequest)) *MockInventoryService_CalculateCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CartRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CartRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_CalculateCart_Call) Return(cartResponse *dto.CartResponse, err error) *MockInventoryService_CalculateCart_Call {
	_c.Call.Return(cartResponse, err)
	return _c
}

func (_c *MockInventoryService_CalculateCart_Call) RunAndReturn(run func(ctx context.Context, request *dto.CartRequest) (*dto.CartResponse, error)) *MockInventoryService_CalculateCart_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeProductCount provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) ChangeProductCount(ctx context.Context, request *dto.ChangeProductCountRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ChangeProductCount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.ChangeProductCountRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInventoryService_ChangeProductCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeProductCount'
type MockInventoryService_ChangeProductCount_Call struct {
	*mock.Call
}

// ChangeProductCount is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.ChangeProductCountRequest
func (_e *MockInventoryService_Expecter) ChangeProductCount(ctx interface{}, request interface{}) *MockInventoryService_ChangeProductCount_Call {
	return &MockInventoryService_ChangeProductCount_Call{Call: _e.mock.On("ChangeProductCount", ctx, request)}
}

func (_c *MockInventoryService_ChangeProductCount_Call) Run(run func(ctx context.Context, request *dto.ChangeProductCountRequest)) *MockInventoryService_ChangeProductCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.ChangeProductCountRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.ChangeProductCountRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_ChangeProductCount_Call) Return(err error) *MockInventoryService_ChangeProductCount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInventoryService_ChangeProductCount_Call) RunAndReturn(run func(ctx context.Context, request *dto.ChangeProductCountRequest) error) *MockInventoryService_ChangeProductCount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInventory provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) CreateInventory(ctx context.Context, request *dto.InventoryCreateRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateInventory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.InventoryCreateRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInventoryService_CreateInventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInventory'
type MockInventoryService_CreateInventory_Call struct {
	*mock.Call
}

// CreateInventory is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.InventoryCreateRequest
func (_e *MockInventoryService_Expecter) CreateInventory(ctx interface{}, request interface{}) *MockInventoryService_CreateInventory_Call {
	return &MockInventoryService_CreateInventory_Call{Call: _e.mock.On("CreateInventory", ctx, request)}
}

func (_c *MockInventoryService_CreateInventory_Call) Run(run func(ctx context.Context, request *dto.InventoryCreateRequest)) *MockInventoryService_CreateInventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.InventoryCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.InventoryCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_CreateInventory_Call) Return(err error) *MockInventoryService_CreateInventory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInventoryService_CreateInventory_Call) RunAndReturn(run func(ctx context.Context, request *dto.InventoryCreateRequest) error) *MockInventoryService_CreateInventory_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductFromWarehouse provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) GetProductFromWarehouse(ctx context.Context, warehouseID string, productID string) (*dto.ProductFromWarehouseResponse, error) {
	ret := _mock.Called(ctx, warehouseID, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductFromWarehouse")
	}

	var r0 *dto.ProductFromWarehouseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*dto.ProductFromWarehouseResponse, error)); ok {
		return returnFunc(ctx, warehouseID, productID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *dto.ProductFromWarehouseResponse); ok {
		r0 = returnFunc(ctx, warehouseID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductFromWarehouseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, warehouseID, productID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_GetProductFromWarehouse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductFromWarehouse'
type MockInventoryService_GetProductFromWarehouse_Call struct {
	*mock.Call
}

// GetProductFromWarehouse is a helper method to define mock.On call
//   - ctx context.Context
//   - warehouseID string
//   - productID string
func (_e *MockInventoryService_Expecter) GetProductFromWarehouse(ctx interface{}, warehouseID interface{}, productID interface{}) *MockInventoryService_GetProductFromWarehouse_Call {
	return &MockInventoryService_GetProductFromWarehouse_Call{Call: _e.mock.On("GetProductFromWarehouse", ctx, warehouseID, productID)}
}

func (_c *MockInventoryService_GetProductFromWarehouse_Call) Run(run func(ctx context.Context, warehouseID string, productID string)) *MockInventoryService_GetProductFromWarehouse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInventoryService_GetProductFromWarehouse_Call) Return(productFromWarehouseResponse *dto.ProductFromWarehouseResponse, err error) *MockInventoryService_GetProductFromWarehouse_Call {
	_c.Call.Return(productFromWarehouseResponse, err)
	return _c
}

func (_c *MockInventoryService_GetProductFromWarehouse_Call) RunAndReturn(run func(ctx context.Context, warehouseID string, productID string) (*dto.ProductFromWarehouseResponse, error)) *MockInventoryService_GetProductFromWarehouse_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductsAtWarehouse provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) GetProductsAtWarehouse(ctx context.Context, params *dto.Pagination, warehouseID string) (*dto.ProductsResponse, error) {
	ret := _mock.Called(ctx, params, warehouseID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsAtWarehouse")
	}

	var r0 *dto.ProductsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.Pagination, string) (*dto.ProductsResponse, error)); ok {
		return returnFunc(ctx, params, warehouseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.Pagination, string) *dto.ProductsResponse); ok {
		r0 = returnFunc(ctx, params, warehouseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.Pagination, string) error); ok {
		r1 = returnFunc(ctx, params, warehouseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_GetProductsAtWarehouse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductsAtWarehouse'
type MockInventoryService_GetProductsAtWarehouse_Call struct {
	*mock.Call
}

// GetProductsAtWarehouse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *dto.Pagination
//   - warehouseID string
func (_e *MockInventoryService_Expecter) GetProductsAtWarehouse(ctx interface{}, params interface{}, warehouseID interface{}) *MockInventoryService_GetProductsAtWarehouse_Call {
	return &MockInventoryService_GetProductsAtWarehouse_Call{Call: _e.mock.On("GetProductsAtWarehouse", ctx, params, warehouseID)}
}

func (_c *MockInventoryService_GetProductsAtWarehouse_Call) Run(run func(ctx context.Context, params *dto.Pagination, warehouseID string)) *MockInventoryService_GetProductsAtWarehouse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.Pagination
		if args[1] != nil {
			arg1 = args[1].(*dto.Pagination)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInventoryService_GetProductsAtWarehouse_Call) Return(productsResponse *dto.ProductsResponse, err error) *MockInventoryService_GetProductsAtWarehouse_Call {
	_c.Call.Return(productsResponse, err)
	return _c
}

func (_c *MockInventoryService_GetProductsAtWarehouse_Call) RunAndReturn(run func(ctx context.Context, params *dto.Pagination, warehouseID string) (*dto.ProductsResponse, error)) *MockInventoryService_GetProductsAtWarehouse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

type MockProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductService) EXPECT() *MockProductService_Expecter {
	return &MockProductService_Expecter{mock: &_m.Mock}
}

// AddProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) AddProduct(ctx context.Context, request *dto.ProductRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.ProductRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductService_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type MockProductService_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.ProductRequest
func (_e *MockProductService_Expecter) AddProduct(ctx interface{}, request interface{}) *MockProductService_AddProduct_Call {
	return &MockProductService_AddProduct_Call{Call: _e.mock.On("AddProduct", ctx, request)}
}

func (_c *MockProductService_AddProduct_Call) Run(run func(ctx context.Context, request *dto.ProductRequest)) *MockProductService_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.ProductRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.ProductRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_AddProduct_Call) Return(err error) *MockProductService_AddProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductService_AddProduct_Call) RunAndReturn(run func(ctx context.Context, request *dto.ProductRequest) error) *MockProductService_AddProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function for the type MockProductService
func (_mock *MockProductService) GetProducts(ctx context.Context) ([]*dto.ProductAtListResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []*dto.ProductAtListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*dto.ProductAtListResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*dto.ProductAtListResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProductAtListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type MockProductService_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProductService_Expecter) GetProducts(ctx interface{}) *MockProductService_GetProducts_Call {
	return &MockProductService_GetProducts_Call{Call: _e.mock.On("GetProducts", ctx)}
}

func (_c *MockProductService_GetProducts_Call) Run(run func(ctx context.Context)) *MockProductService_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProductService_GetProducts_Call) Return(productAtListResponses []*dto.ProductAtListResponse, err error) *MockProductService_GetProducts_Call {
	_c.Call.Return(productAtListResponses, err)
	return _c
}

func (_c *MockProductService_GetProducts_Call) RunAndReturn(run func(ctx context.Context) ([]*dto.ProductAtListResponse, error)) *MockProductService_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) UpdateProduct(ctx context.Context, productID uuid.UUID, request *dto.ProductRequest) error {
	ret := _mock.Called(ctx, productID, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.ProductRequest) error); ok {
		r0 = returnFunc(ctx, productID, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productID uuid.UUID
//   - request *dto.ProductRequest
func (_e *MockProductService_Expecter) UpdateProduct(ctx interface{}, productID interface{}, request interface{}) *MockProductService_UpdateProduct_Call {
	return &MockProductService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, productID, request)}
}

func (_c *MockProductService_UpdateProduct_Call) Run(run func(ctx context.Context, productID uuid.UUID, request *dto.ProductRequest)) *MockProductService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *dto.ProductRequest
		if args[2] != nil {
			arg2 = args[2].(*dto.ProductRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) Return(err error) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, productID uuid.UUID, request *dto.ProductRequest) error) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWarehouseService creates a new instance of MockWarehouseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWarehouseService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockWarehouseService {
	mock := &MockWarehouseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWarehouseService is an autogenerated mock type for the WarehouseService type
type MockWarehouseService struct {
	mock.Mock
}

type MockWarehouseService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWarehouseService) EXPECT() *MockWarehouseService_Expecter {
	return &MockWarehouseService_Expecter{mock: &_m.Mock}
}

// CreateWarehouse provides a mock function for the type MockWarehouseService
func (_mock *MockWarehouseService) CreateWarehouse(ctx context.Context, request *dto.WarehouseRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateWarehouse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.WarehouseRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseService_CreateWarehouse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWarehouse'
type MockWarehouseService_CreateWarehouse_Call struct {
	*mock.Call
}

// CreateWarehouse is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.WarehouseRequest
func (_e *MockWarehouseService_Expecter) CreateWarehouse(ctx interface{}, request interface{}) *MockWarehouseService_CreateWarehouse_Call {
	return &MockWarehouseService_CreateWarehouse_Call{Call: _e.mock.On("CreateWarehouse", ctx, request)}
}

func (_c *MockWarehouseService_CreateWarehouse_Call) Run(run func(ctx context.Context, request *dto.WarehouseRequest)) *MockWarehouseService_CreateWarehouse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.WarehouseRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.WarehouseRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWarehouseService_CreateWarehouse_Call) Return(err error) *MockWarehouseService_CreateWarehouse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseService_CreateWarehouse_Call) RunAndReturn(run func(ctx context.Context, request *dto.WarehouseRequest) error) *MockWarehouseService_CreateWarehouse_Call {
	_c.Call.Return(run)
	return _c
}

// GetWarehouses provides a mock function for the type MockWarehouseService
func (_mock *MockWarehouseService) GetWarehouses(ctx context.Context) ([]*dto.WarehouseAtListResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWarehouses")
	}

	var r0 []*dto.WarehouseAtListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*dto.WarehouseAtListResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*dto.WarehouseAtListResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.WarehouseAtListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseService_GetWarehouses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWarehouses'
type MockWarehouseService_GetWarehouses_Call struct {
	*mock.Call
}

// GetWarehouses is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWarehouseService_Expecter) GetWarehouses(ctx interface{}) *MockWarehouseService_GetWarehouses_Call {
	return &MockWarehouseService_GetWarehouses_Call{Call: _e.mock.On("GetWarehouses", ctx)}
}

func (_c *MockWarehouseService_GetWarehouses_Call) Run(run func(ctx context.Context)) *MockWarehouseService_GetWarehouses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWarehouseService_GetWarehouses_Call) Return(warehouseAtListResponses []*dto.WarehouseAtListResponse, err error) *MockWarehouseService_GetWarehouses_Call {
	_c.Call.Return(warehouseAtListResponses, err)
	return _c
}

func (_c *MockWarehouseService_GetWarehouses_Call) RunAndReturn(run func(ctx context.Context) ([]*dto.WarehouseAtListResponse, error)) *MockWarehouseService_GetWarehouses_Call {
	_c.Call.Return(run)
	return _c
}
